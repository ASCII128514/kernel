1. Input/Output       3   The kprintf is working correctly in kernel, (tested on lines 148-149 of boot.c). 
                          From the shell, we can see that getline is working correctly. getline relies on sys_read, 
                          which relies on kgetc. Hence kgetc also works.
2. Exceptions         3   All the exceptions are in handler.c and since key board interrupt is working correctly, 
                          all interrputs should work. When a page fault is generated (by uncommenting lines 13-14 of helloworld),
                          the error code is reported.
3. Virtual Memory     3   We can successfully load and run executables, which relies on vm_map, so mapping vitual memory is working.
                          The virtual memory test code is in init (lines 12-20), commented out. The first time that init is run, we can 
                          write to and read memory mapped on lines 153-154 of boot.c. After an exit system call reloads init, however, 
                          this test causes a page fault after an exit system call reloads init. This makes sense, because exit unmaps the 
                          lower half, so subsequent accesses will cause a page fault.
4. System Calls       3   We can read and write to the shell by typing. The test code for mmap is on line 127 of boot.c
5. Loader             3   The init program runs and it can execute.
6. Standard Library   3   Printf, strlen, and memcpy are all in stdlib. We don't have a kernel version for strlen or memcpy.
7. User Mode          3   The user program cannot access higher half, the test code is in helloworld.c and commented out.
8. Processes          3   The init works and it calls shell, which exits when we have an inivalid command, restarting init
9. Shell              3   The shell successfully runs helloworld
10. Code Quality      3   Each function is well commented and put into the right file with a logical name.
